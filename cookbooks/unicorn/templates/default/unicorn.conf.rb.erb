
worker_processes <%= @nb_workers %>

working_directory "<%= @app_directory %>"

listen "<%= @unicorn_socket %>", :backlog => 2048

timeout <%= @unicorn_timeout %>

preload_app true

pid "<%= @pid_file %>"

stderr_path "<%= @log_prefix %>.stderr.log"
stdout_path "<%= @log_prefix %>.stdout.log"

#Make REE use the copy on write GC
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

Unicorn::HttpServer::START_CTX[:argv] = []
Unicorn::HttpServer::START_CTX[0] = '<%= @cmd %>'

puts "##{Process.pid} Current ruby version #{RUBY_VERSION}"
puts "##{Process.pid} Current gem home #{ENV['GEM_HOME']}"

before_exec do |server|
  ENV['PATH'] = ENV['PATH'].split(':').select{|x| ! (x.match('rbenv') && x.match('versions'))}.join(':')
  ENV.keys.each do |x|
    ENV.delete x if x.match(/RUBY/) || x.match(/BUNDLE/) || x.match(/RBENV/) || x.match(/GEM/)
    if x.match(/_FIGARO_(.*)/)
      ENV.delete $1
      ENV.delete x
    end
  end
  server.logger.info("Reloading by launching #{Unicorn::HttpServer::START_CTX[0]}")
end

before_fork do |server, worker|
  old_pid_file = "<%= @pid_file %>.oldbin"
  if File.exists?(old_pid_file) && server.pid != old_pid_file
    old_pid = File.read(old_pid_file).to_i
    Thread.new do
      sleep <%= @delay_before_kill_old %>
      begin
        Process.kill("QUIT", old_pid)
      rescue Errno::ENOENT, Errno::ESRCH
        # someone else did our job for us
      end
    end
  end
  # the following is recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end
end

after_fork do |server, worker|
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end
  <%= @worker_boot_code %>
end

