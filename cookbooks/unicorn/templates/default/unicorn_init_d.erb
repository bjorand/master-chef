#! /bin/sh

### BEGIN INIT INFO
# Provides:          <%= @name %>
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts <%= @name %>
# Description:       starts <%= @name %>
### END INIT INFO

NAME="<%= @name %>"
USER="<%= @user %>"
DAEMON="<%= @cmd %>"
APP_DIRECTORY="<%= @app_directory %>"
PID_FILE="<%= @pid_file %>"
START_STOP_DAEMON="/sbin/start-stop-daemon"
CONFIG_FILE="<%= @config_file %>"
UNICORN_CMD="<%= @unicorn_cmd %>"

test -x $DAEMON || exit 0
test -f $CONFIG_FILE || exit 0
test -d "$APP_DIRECTORY" || exit 0

<%= @code_for_initd %>

<% @vars_to_unset.each do |v| %>
unset <%= v %>
<% end %>

set -e

. /lib/lsb/init-functions

kill_unicorn() {
  SIGNAL=$1

	if [ -f $PID_FILE ]; then
		kill $SIGNAL `cat $PID_FILE` || true
	fi
}

start_unicorn() {
	echo -n "Starting $NAME: "
	$START_STOP_DAEMON -c $USER --start --exec $DAEMON -p $PID_FILE -- -c "$DAEMON" || exit 1
	echo "$NAME."
}

reload_unicorn() {
	echo -n "Reloading $NAME: "
	old_pid=$(cat $PID_FILE)
	kill_unicorn "-USR2"
	i=0
  while [ true ]; do
    sleep 2
    i=$(expr $i + 1)
    if [ "$(cat $PID_FILE)" != "$old_pid" -a ! -f $PID_FILE.oldbin ]; then
    	echo "$NAME."
    	break
    fi
    if [ $i -gt 60 ]; then
      echo "Unable to find running process after 60 seconds."
      exit 1
    fi
  done
}

case "$1" in
  start)
  	start_unicorn
	;;
  stop)
	echo -n "Stopping $NAME: "
	kill_unicorn
	echo "$NAME."
	;;
  reload)
  if [ -f $PID_FILE ] && [ -d "/proc/$(cat $PID_FILE)" ]; then
  	reload_unicorn
  else
  	start_unicorn
	fi
	;;
  restart)
	echo -n "Restarting $NAME: "
	kill_unicorn
	sleep 1
	$START_STOP_DAEMON -c $USER --start --exec $DAEMON -p $PID_FILE -- -c "$DAEMON" || exit 1
	echo "$NAME."
	;;
  reopen_log)
	echo -n "Repoen logs $NAME: "
	kill_unicorn -USR1
	echo "$NAME."
	;;
  status)
	status_of_proc -p $PID_FILE $UNICORN_CMD $UNICORN_CMD && exit 0 || exit $?
	;;
  *)
	echo "Usage: $NAME {start|stop|restart|status|reload|reopen_log}" >&2
	exit 1
	;;
esac

exit 0
